module top(
    input basys_clk,
    input center_btn,
    input up_btn,
    input down_btn,
    output cs,
    output sdin,
    output sclk,
    output d_cn,
    output resn,
    output vccen,
    output pmoden
);

wire clk_6_25MHz;
wire [15:0] pixel_index;
wire [15:0] pixel_data;

flexible_clock_divider unit_clk_6_25MHz(.basys_clk(basys_clk),.reset (7), .slow_clk(clk_6_25MHz));

// Instantiate OLED Display
Oled_Display oled (
    .clk(clk_6_25MHz),
    .reset(0),
    .frame_begin(),
    .sending_pixels(),
    .sample_pixel(),
    .pixel_index(pixel_index),
    .pixel_data(pixel_data),
    .cs(cs),
    .sdin(sdin),
    .sclk(sclk),
    .d_cn(d_cn),
    .resn(resn),
    .vccen(vccen),
    .pmoden(pmoden)
);

// Display Parameters
localparam WIDTH = 96;
localparam HEIGHT = 64;
localparam CENTER_X = WIDTH / 2;
localparam CENTER_Y = HEIGHT / 2;

// Color Definitions
localparam COLOR_BLACK = 16'h0000;
localparam COLOR_RED   = 16'hF800;
localparam COLOR_GREEN = 16'h07E0;

// Border Parameters
localparam BORDER_DISTANCE = 4;
localparam BORDER_THICKNESS = 3;

// Ring Parameters
reg ring_active = 0;
reg [7:0] outer_dia = 30;  // Initial outer diameter
wire [7:0] inner_dia = outer_dia - 5;

// Pixel Index Handling
wire [15:0] pixel_index;
wire [7:0] x = pixel_index % WIDTH;
wire [7:0] y = pixel_index / WIDTH;

// Border Detection
wire in_border;
assign in_border = (
    (x >= BORDER_DISTANCE && x < BORDER_DISTANCE + BORDER_THICKNESS) ||      // Left
    (x >= WIDTH - BORDER_DISTANCE - BORDER_THICKNESS && 
     x < WIDTH - BORDER_DISTANCE) ||                                         // Right
    (y >= BORDER_DISTANCE && y < BORDER_DISTANCE + BORDER_THICKNESS) ||      // Top
    (y >= HEIGHT - BORDER_DISTANCE - BORDER_THICKNESS && 
     y < HEIGHT - BORDER_DISTANCE)                                            // Bottom
);

// Ring Detection
wire [15:0] dx = x - CENTER_X;
wire [15:0] dy = y - CENTER_Y;
wire [31:0] dx_sq = dx * dx;
wire [31:0] dy_sq = dy * dy;
wire [31:0] distance_sq = dx_sq + dy_sq;
wire [31:0] distance_sq_4x = distance_sq << 2;
wire [31:0] outer_sq = outer_dia * outer_dia;
wire [31:0] inner_sq = (outer_dia - 5) * (outer_dia - 5);
wire in_ring = (distance_sq_4x <= outer_sq) && (distance_sq_4x >= inner_sq);

// Pixel Color Assignment
reg [15:0] pixel_data;
always @(*) begin
    if (in_border) begin
        pixel_data = COLOR_RED;
    end else if (ring_active && in_ring) begin
        pixel_data = COLOR_GREEN;
    end else begin
        pixel_data = COLOR_BLACK;
    end
end

// Button Debouncing
wire center_pressed, up_pressed, down_pressed;

debounce deb_center (
    .clk(clk_6_25MHz),
    .reset(reset),
    .btn_in(center_btn),
    .pressed(center_pressed)
);

debounce deb_up (
    .clk(clk_6_25MHz),
    .reset(reset),
    .btn_in(up_btn),
    .pressed(up_pressed)
);

debounce deb_down (
    .clk(clk_6_25MHz),
    .reset(reset),
    .btn_in(down_btn),
    .pressed(down_pressed)
);

// Control Logic
always @(posedge clk_6_25MHz) begin
    if (reset) begin
        ring_active <= 0;
        outer_dia <= 30;
    end else begin
        // Center Button: Activate ring
        if (center_pressed && !ring_active) begin
            ring_active <= 1;
        end

        // Up Button: Increase size
        if (up_pressed && ring_active) begin
            if (outer_dia <= 45) outer_dia <= outer_dia + 5;
        end

        // Down Button: Decrease size
        if (down_pressed && ring_active) begin
            if (outer_dia >= 15) outer_dia <= outer_dia - 5;
        end
    end
end

endmodule

// Debounce Module
module debounce(
    input clk,
    input reset,
    input btn_in,
    output reg pressed
);

localparam DEBOUNCE_MS = 2;
localparam CLK_FREQ = 6250000;  // 6.25 MHz
localparam MAX_COUNT = (CLK_FREQ * DEBOUNCE_MS) / 1000;

reg [15:0] counter;
reg [1:0] state;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        state <= 0;
        counter <= 0;
        pressed <= 0;
    end else begin
        pressed <= 0;
        case (state)
            0: begin  // Idle
                if (btn_in) begin
                    state <= 1;
                    counter <= 0;
                end
            end
            1: begin  // Debounce wait
                if (counter < MAX_COUNT) begin
                    counter <= counter + 1;
                end else begin
                    if (btn_in) begin
                        pressed <= 1;
                        state <= 2;
                    end else begin
                        state <= 0;
                    end
                end
            end
            2: begin  // Pressed
                if (!btn_in) state <= 0;
            end
        endcase
    end
end

endmodule

module flexible_clock_divider(
    input basys_clk,  
    input reset,
    output reg slow_clk 
);
    reg [21:0] counter = 0;
    
    always @(posedge basys_clk) begin
        counter <= counter + 1;
        if (counter == reset) begin
            slow_clk <= ~slow_clk;
            counter <= 0;
        end
    end
endmodule

//reset is grounded
//